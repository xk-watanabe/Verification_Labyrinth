(* Client4 sub-process *)
let client_4(c4:channel,recoveryCodes:bitstring)=
(* Client secret generation *)
    let (deviceKeyPriv:priv_key_sig,deviceKeyPub:pub_key_sig) = pk_sig_keygen() in
    let (epochStorageKeyPriv:priv_key_enc,epochStorageKeyPub:pub_key_enc) = pk_enc_keygen() in
    let epochStorageKeySig = pk_sign_enc(deviceKeyPriv,b_0x30,epochStorageKeyPub) in
    let (epochStorageAuthKeyPriv:priv_key_auth,epochStorageAuthKeyPub:pub_key_auth) = pk_auth_keygen() in
    let epochStorageAuthKeySig = pk_sign_auth(deviceKeyPriv,b_0x31,epochStorageAuthKeyPub) in
    (* Parse the recovery code *)
    let (=version,=identifier,entropy:bitstring,errorCorrectionCodes:bitstring) = recoveryCodes in
    let (vdeviceId:bitstring,vdeviceDecryptionKey:bitstring) = kdf(convertKey(entropy),null,concat((BackupRecoveryCode_v,version,under_score,identifier,under_score,user_id))) in
    (* Fetch all of the virtual device's values from server *)
    in(c4,(encryptedDeviceKeyPriv:bitstring,encryptedEpochStorageKeyPriv:bitstring,encryptedOrfClientState:bitstring,encryptedMailboxRootSalt:bitstring,encryptedEpochRootKey:bitstring,encryptedEpochSequenceID:bitstring,
        deviceKeyPub_v:pub_key_sig,epochStorageKeyPub_v:pub_key_enc,
        epochStorageKeySig_v:signature,
        epochDeviceMac_v:bitstring));
    let (n0:nonce,encryptedOrfClientState':bitstring) = encryptedOrfClientState in
    let vdeviceClientState = decrypt(convertKey(vdeviceDecryptionKey),n0,virtual_device_colon_ocmf_client_state,encryptedOrfClientState') in
    let (n1:nonce,encryptedEpochRootKey':bitstring) = encryptedEpochRootKey in
    let epochRootKey = decrypt(convertKey(vdeviceDecryptionKey),n1,virtual_device_colon_epoch_root_key,encryptedEpochRootKey') in
    let (n2:nonce,encryptedEpochSequenceID':bitstring) = encryptedEpochSequenceID in
    let epochSequenceID = base64_decode(decrypt(convertKey(vdeviceDecryptionKey),n2,virtual_device_colon_epoch_anon_id,encryptedEpochSequenceID')) in
    (* Enrolling *)
    let epochDeviceMacKey = kdf(convertKey(epochRootKey),null,concat((epoch_devices_,base64_encode(epochSequenceID)))) in
    let (clientState:coins,evolveToken:coins) = orf_client_evolve(bitstring_to_coins(vdeviceClientState)) in
    let epochDeviceMac = mac(epochDeviceMacKey,deviceKeyPub) in
    (* The public keys, signatures, evolveToken and epochDeviceMac are registered to the server *)
    out(c4,(deviceKeyPub,epochStorageKeyPub,epochStorageAuthKeyPub,
        epochStorageKeySig,epochStorageAuthKeySig,
        evolveToken,epochDeviceMac));
    let epochDataStorageKey = kdf(convertKey(epochRootKey),null,concat((epoch_data_storage_,base64_encode(epochSequenceID)))) in
    (* Derive a message key (1st Epoch) *)
    in(c4,(encryptedPreviousEpochSequenceID:bitstring,encryptedPreviousEpochRootKey:bitstring));
    let (n3:nonce,encryptedPreviousEpochSequenceID':bitstring) = encryptedPreviousEpochSequenceID in
    let previousEpochSequenceID = decrypt(convertKey(epochDataStorageKey),n3,epoch_data_metadata,encryptedPreviousEpochSequenceID') in
    let (n4:nonce,encryptedPreviousEpochRootKey':bitstring) = encryptedPreviousEpochRootKey in
    let previousEpochRootKey = decrypt_key(convertKey(epochDataStorageKey),n4,epoch_data_metadata,encryptedPreviousEpochRootKey') in
    let previousMessageKey = kdf(previousEpochRootKey,null,concat((message_key_in_epoch_,previousEpochSequenceID,cipher_version_3_thread_,threadId))) in
    let previousEpochDataStorageKey = kdf(previousEpochRootKey,null,concat((epoch_data_storage_,base64_encode(bitstring_to_nat(previousEpochSequenceID))))) in
    (* Derive a message key (2nd Epoch) *)
    let messageKey = kdf(convertKey(epochRootKey),null,concat((message_key_in_epoch_,epochSequenceID,cipher_version_3_thread_,threadId))) in
    (* Parallel: Save and Load *)
    (
        (!
            (* Save a message (3rd epoch) *)
            new message_2: bitstring;
            new n5: nonce;
            event save_message_2_c4(message_2);
            out(c4,(n5,encrypt(convertKey(messageKey),n5,concat((message_thread_,threadId)),message_2)))
        )
        |
        (!
            (* Load a message (1st epoch) *)
            in(c4,encryptedMessage:bitstring);
            let (n5:nonce,ciphertext:bitstring) = encryptedMessage in
            let message' = decrypt(convertKey(previousMessageKey),n5,(concat((message_thread_,threadId))),ciphertext) in
            event load_message_1_c4(message')
        )
        |
        (!
            (* Load a message (2nd epoch) *)
            in(c4,encryptedMessage:bitstring);
            let (n5:nonce,ciphertext:bitstring) = encryptedMessage in
            let message' = decrypt(convertKey(messageKey),n5,(concat((message_thread_,threadId))),ciphertext) in
            event load_message_2_c4(message')
        )
    ).