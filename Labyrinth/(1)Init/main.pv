(* Channel *)
free c1: channel.

(* Ideal AEAD *)
type key.
type nonce.
fun enc_cipher(key,nonce,bitstring,bitstring): bitstring.
reduc forall k:key,n:nonce,aad,plaintext:bitstring;
    dec_cipher(k,n,aad,enc_cipher(k,n,aad,plaintext)) = plaintext.
fun enc_tag(key,nonce,bitstring,bitstring): bitstring.
letfun encrypt(k:key,n:nonce,aad:bitstring,plaintext:bitstring)=
    (enc_cipher(k,n,aad,plaintext),enc_tag(k,n,aad,plaintext)).
letfun decrypt(k:key,n:nonce,aad:bitstring,ciphertext':bitstring)=
    let (ciphertext:bitstring,tag:bitstring) = ciphertext' in
    let plaintext' = dec_cipher(k,n,aad,ciphertext) in
    if tag = enc_tag(k,n,aad,plaintext') then
    plaintext'.

(* HPKE *)
type priv_key_enc.
type pub_key_enc.
fun pub_enc_gen(priv_key_enc): pub_key_enc.

type priv_key_auth.
type pub_key_auth.
fun pub_auth_gen(priv_key_auth): pub_key_auth.

letfun pk_enc_keygen()=
    new pv_key_enc: priv_key_enc;
    let pb_key_enc = pub_enc_gen(pv_key_enc) in
    (pv_key_enc,pb_key_enc).

letfun pk_auth_keygen()=
    new pv_key_auth: priv_key_auth;
    let pb_key_auth = pub_auth_gen(pv_key_auth) in
    (pv_key_auth,pb_key_auth).

fun pk_encrypt(pub_key_enc,pub_key_auth,priv_key_auth,bitstring,bitstring,bitstring): bitstring.
reduc forall pv_key_enc:priv_key_enc,pv_key_auth:priv_key_auth,pre_shared_key,aad,plaintext:bitstring;
    pk_decrypt(pub_enc_gen(pv_key_enc),pv_key_enc,pub_auth_gen(pv_key_auth),pre_shared_key,aad,
        pk_encrypt(pub_enc_gen(pv_key_enc),pub_auth_gen(pv_key_auth),pv_key_auth,pre_shared_key,aad,plaintext)) = plaintext.

(* Signature *)
type priv_key_sig.
type pub_key_sig.
fun gen_pub_sig(priv_key_sig): pub_key_sig.

letfun pk_sig_keygen()=
    new pv_key_sig: priv_key_sig;
    let pb_key_sig = gen_pub_sig(pv_key_sig) in
    (pv_key_sig,pb_key_sig).

type signature.
type use_case_byte.
fun pk_sign_enc(priv_key_sig,use_case_byte,pub_key_enc): signature.
fun pk_sign_auth(priv_key_sig,use_case_byte,pub_key_auth): signature.
reduc forall pv_key_sig:priv_key_sig,bytes:use_case_byte,data:pub_key_enc;
    pk_verify_enc(gen_pub_sig(pv_key_sig),pk_sign_enc(pv_key_sig,bytes,data),bytes,data) = true.
reduc forall pv_key_sig:priv_key_sig,bytes:use_case_byte,data:pub_key_auth;
    pk_verify_auth(gen_pub_sig(pv_key_sig),pk_sign_auth(pv_key_sig,bytes,data),bytes,data) = true.

(* Key Derivation *)
fun kdf_two_first(key,bitstring,bitstring): bitstring.
fun kdf_two_second(key,bitstring,bitstring): bitstring.
letfun kdf(a:key,b:bitstring,c:bitstring)=
    let x = kdf_two_first(a,b,c) in
    let y = kdf_two_second(a,b,c) in
    (x,y).

(* Concat *)
fun concat(bitstring): bitstring.

(* ORF *)
type coins.
fun mult_coins(coins,coins): coins.
fun div_coins(coins,coins): coins.
letfun orf_cilent_init()=
    new cilent_state: coins;
    cilent_state.
letfun orf_server_init()=
    new server_state: coins;
    server_state.
letfun orf_client_evolve(x:coins)=
    new rotation_token: coins;
    let new_client_state = mult_coins(x,rotation_token) in
    (new_client_state,rotation_token).
letfun orf_server_state(x:coins,y:coins)=
    let new_server_state = div_coins(x,y) in
    new_server_state.

(* NAT *)
reduc forall x:nat; nat_init(x) = x.

(* Base64 Encoding *)
fun base64_encode(nat): bitstring.
reduc forall x:nat; base64_decode(base64_encode(x)) = x.

(* Constant data *)
const null: bitstring.
const epoch_data_storage_: bitstring.
const epoch_devices_: bitstring.
const message_key_in_epoch_: bitstring.
const cipher_version_3_thread_: bitstring.
const message_thread_: bitstring.
const epoch_chaining_: bitstring.
const epoch_root_key: bitstring.
const b_0x30: use_case_byte.
const b_0x31: use_case_byte.

(* DB *)
table epoch1(bitstring).

(* freedata *)
free threadId: bitstring.

(* Type Converter *)
fun convertKey(bitstring): key[typeConverter].

(* Secrecy *)
query secret message.

(* Events *)
event save_message(bitstring).
event load_message(bitstring).
query m:bitstring; event(load_message(m)) ==> event(save_message(m)).

(* Client1 sub-process *)
let client()=
    (* Client secret generation *)
    let (deviceKeyPriv:priv_key_sig,deviceKeyPub:pub_key_sig) = pk_sig_keygen() in
    let (epochStorageKeyPriv:priv_key_enc,epochStorageKeyPub:pub_key_enc) = pk_enc_keygen() in
    let epochStorageKeySig = pk_sign_enc(deviceKeyPriv,b_0x30,epochStorageKeyPub) in
    let (epochStorageAuthKeyPriv:priv_key_auth,epochStorageAuthKeyPub:pub_key_auth) = pk_auth_keygen() in
    let epochStorageAuthKeySig = pk_sign_auth(deviceKeyPriv,b_0x31,epochStorageAuthKeyPub) in
    let orfClientState = orf_cilent_init() in
    (* Backup salt generation on the client *)
    new mailboxRootSalt: coins;
    (* client uploads to the server *)
    out(c1,(deviceKeyPub,epochStorageKeyPub,epochStorageKeySig,epochStorageAuthKeyPub,epochStorageAuthKeySig));
    (* Opening an Epoch *)
    (* Generate core epoch values (first epoch) *)
    new epochRootKey: bitstring;
    let epochSequenceID = nat_init(0) in
    (* Store epoch metadata *)
    let epochDataStorageKey = kdf(convertKey(epochRootKey),null,concat((epoch_data_storage_,base64_encode(epochSequenceID)))) in
    let epochDeviceMacKey = kdf(convertKey(epochRootKey),null,concat((epoch_devices_,base64_encode(epochSequenceID)))) in
    (* Derive a message key *)
    let messageKey = kdf(convertKey(epochRootKey),null,concat((message_key_in_epoch_,epochSequenceID,cipher_version_3_thread_,threadId))) in
    (* Parallel: Save and Load *)
    (!
        (* Save a message (1st epoch) *)
        new message: bitstring;
        new n0: nonce;
        event save_message(message);
        out(c1,(n0,encrypt(convertKey(messageKey),n0,concat((message_thread_,threadId)),message)))
    )
    |
    (!
        (* Load a message (1st epoch) *)
        in(c1,encryptedMessage:bitstring);
        let (n0:nonce,ciphertext:bitstring) = encryptedMessage in
        let message' = decrypt(convertKey(messageKey),n0,concat((message_thread_,threadId)),ciphertext) in
        event load_message(message')
    ).


(* Server sub-process *)
let server()=
    (* Server initialization (Public Keys and Signatures) *)
    new labyrinthID: bitstring;
    (* client uploads to the server *)
    in(c1,(deviceKeyPub:pub_key_sig,epochStorageKeyPub:pub_key_enc,epochStorageKeySig:signature,epochStorageAuthKeyPub:pub_key_auth,epochStorageAuthKeySig:signature));
    let orfServerState = orf_server_init() in
    (* Parallel: Save and Load *)
    (!
        in(c1,encryptedMessage:bitstring);
        insert epoch1(encryptedMessage)
    )
    |
    (!
        get epoch1(encryptedMessage) in
        out(c1,encryptedMessage)
    ).

(* main *)
process
    (!client|!server)