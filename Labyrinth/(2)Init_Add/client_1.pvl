(* Client1 sub-process *)
let client_1(c1:channel,c2:channel)=
    (* Client secret generation *)
    let (deviceKeyPriv:priv_key_sig,deviceKeyPub:pub_key_sig) = pk_sig_keygen() in
    let (epochStorageKeyPriv:priv_key_enc,epochStorageKeyPub:pub_key_enc) = pk_enc_keygen() in
    let epochStorageKeySig = pk_sign_enc(deviceKeyPriv,b_0x30,epochStorageKeyPub) in
    let (epochStorageAuthKeyPriv:priv_key_auth,epochStorageAuthKeyPub:pub_key_auth) = pk_auth_keygen() in
    let epochStorageAuthKeySig = pk_sign_auth(deviceKeyPriv,b_0x31,epochStorageAuthKeyPub) in
    let orfClientState = orf_cilent_init() in
    (* Backup salt generation on the client *)
    new mailboxRootSalt: coins;
    (* client uploads to the server *)
    out(c1,(deviceKeyPub,epochStorageKeyPub,epochStorageKeySig,epochStorageAuthKeyPub,epochStorageAuthKeySig));
    (* Opening an Epoch *)
    (* Generate core epoch values (first epoch) *)
    new epochRootKey: bitstring;
    let epochSequenceID = nat_init(0) in
    (* Store epoch metadata *)
    let epochDataStorageKey = kdf(convertKey(epochRootKey),null,concat((epoch_data_storage_,base64_encode(epochSequenceID)))) in
    let epochDeviceMacKey = kdf(convertKey(epochRootKey),null,concat((epoch_devices_,base64_encode(epochSequenceID)))) in
    let epochDeviceMac = mac(epochDeviceMacKey,deviceKeyPub) in
    let messageKey = kdf(convertKey(epochRootKey),null,concat((message_key_in_epoch_,epochSequenceID,cipher_version_3_thread_,threadId))) in
    (!
        (* Save a message (1st epoch) *)
        new message: bitstring;
        new n0: nonce;
        event save_message_1_c1(message);
        out(c1,(n0,encrypt(convertKey(messageKey),n0,concat((message_thread_,threadId)),message)))
    )
    |
    (!
        (* Load a message (1st epoch) *)
        in(c1,encryptedMessage:bitstring);
        let (n0:nonce,ciphertext:bitstring) = encryptedMessage in
        let message' = decrypt(convertKey(messageKey),n0,concat((message_thread_,threadId)),ciphertext) in
        event load_message_1_c1(message')
    )
    |
    (
        (* **********Adding a Device********** *)
        (* Generate Recovery Codes *)
        new entropy: bitstring;
        let recoveryCodes = (version,identifier,entropy,errorCorrection(entropy)) in
        let (vdeviceId:bitstring,vdeviceDecryptionKey:bitstring) = kdf(convertKey(entropy),null,concat((BackupRecoveryCode_v,version,under_score,identifier,under_score,user_id))) in
        (* Virtual Devices *)
        let (deviceKeyPriv_v:priv_key_sig,deviceKeyPub_v:pub_key_sig) = pk_sig_keygen() in
        let (epochStorageKeyPriv_v:priv_key_enc,epochStorageKeyPub_v:pub_key_enc) = pk_enc_keygen() in
        let epochStorageKeySig_v = pk_sign_enc(deviceKeyPriv_v,b_0x30,epochStorageKeyPub_v) in
        let (vdeviceClientState:coins,evolveToken:coins) = orf_client_evolve(orfClientState) in
        new n0: nonce;
        let encryptedDeviceKeyPriv = (n0,encrypt(convertKey(vdeviceDecryptionKey),n0,virtual_device_colon_virtual_device_private_key,priv_key_sig_to_bitstring(deviceKeyPriv_v))) in
        new n1: nonce;
        let encryptedEpochStorageKeyPriv = (n1,encrypt(convertKey(vdeviceDecryptionKey),n1,virtual_device_colon_epoch_storage_private_key,priv_key_enc_to_bitstring(epochStorageKeyPriv_v))) in
        new n2: nonce;
        let encryptedOrfClientState = (n2,encrypt(convertKey(vdeviceDecryptionKey),n2,virtual_device_colon_ocmf_client_state,coins_to_bitstring(vdeviceClientState))) in
        new n3: nonce;
        let encryptedMailboxRootSalt = (n3,encrypt(convertKey(vdeviceDecryptionKey),n3,virtual_device_colon_mailbox_root_key,coins_to_bitstring(mailboxRootSalt))) in
        new n4: nonce;
        let encryptedEpochRootKey = (n4,encrypt(convertKey(vdeviceDecryptionKey),n4,virtual_device_colon_epoch_root_key,epochRootKey)) in
        new n5: nonce;
        let encryptedEpochSequenceID = (n5,encrypt(convertKey(vdeviceDecryptionKey),n5,virtual_device_colon_epoch_anon_id,base64_encode(epochSequenceID))) in
        let epochDeviceMac_v = mac(epochDeviceMacKey,deviceKeyPub_v) in
        out(c1,(encryptedDeviceKeyPriv,encryptedEpochStorageKeyPriv,encryptedOrfClientState,encryptedMailboxRootSalt,encryptedEpochRootKey,encryptedEpochSequenceID,
            deviceKeyPub_v,epochStorageKeyPub_v,
            vdeviceId,
            epochStorageKeySig_v,
            evolveToken,
            epochDeviceMac_v));
        client_2(c2,recoveryCodes)
    ).